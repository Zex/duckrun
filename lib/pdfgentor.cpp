/*
 * lib/pdfgentor.cpp
 *
 * Author: Zex <top_zlynch@yahoo.com>
 */
#include "pdfgentor.h"

pdfgentor::pdfgentor(QString appname)
: appname(appname) {}

void pdfgentor::add_table_header(const QTableView *res, QString *buf, int col_nr)
{
	*buf += "<tr>";
	for (int y = 0; y < col_nr; y++)
		*buf += "<th bgcolor=darkblue><font color=yellow>"+res->model()->headerData(y, Qt::Horizontal).toString()+"</font></th>";
	*buf += "</tr>";
}

QString pdfgentor::to_html(const QTableView *res, int line_per_page)
{
	int row_nr = res->verticalHeader()->count();
	int col_nr = res->horizontalHeader()->count();
	QString buf = "<table border=3 bgcolor=black width=100\% heigh=100\% colspan=5 align=center>"; 

	for (int y = 0; y < row_nr; y++) {

		if (! (y % line_per_page))
			add_table_header(res, &buf, col_nr);

		buf += "<tr>";
		for (int x = 0; x < col_nr; x++) 
			buf += "<td><font color=yellow>" + res->model()->index(y, x).data().toString() + "</font></td>";
		buf += "</tr>";
	}

	buf += "</table>";

	return buf;
}

void pdfgentor::generate(const QTableView *res)
{
	QTextDocument doc;
	QPrinter printer(QPrinter::HighResolution);

	printer.setOutputFormat(QPrinter::PdfFormat);
	printer.setOutputFileName(QDateTime::currentDateTime().toString("ddMMyyyy-hh:mm:ss")+".pdf");
	printer.setPaperSize(QPrinter::A4);
	printer.setPrintProgram(appname);

	qDebug() << __PRETTY_FUNCTION__ << printer.printProgram() << ' ' << printer.pageRect();
	doc.setHtml(to_html(res, 41)+"<div align=bottom>generated by"+printer.printProgram()+"</div>");
	doc.print(&printer);

	qDebug() << "saved as " << printer.outputFileName();
}



